@page "/listar"
@using LivrosFront.Model
@using LivrosFront.Helpers
@using System.Net.Http
@using System.Text.Json
@inject Api api
@inject NavigationManager NavManager

<PageTitle>Livros</PageTitle>

<h1>Livros</h1>

@if (Objetos == null)
{
    <p><strong>Nenhum livro cadastrado!</strong></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Titulo</th>
                <th scope="col">Categoria</th>
                <th scope="col">Descrição</th>
                <th scope="col">Autor</th>
            </tr>
        </thead>
        <tbody>
        @foreach(var obj in Objetos)
        {
            <tr>
                <td>@obj.Titulo</td>
                <td>@obj.Categoria</td>
                <td>@obj.Descricao</td>
                <td>@obj.Autor</td>
                <td>
                    <a href=@($"/alterar/{obj.Id}") class="btn btn-warning">Alterar</a>
                    <button  @onclick="() => Excluir(obj.Id)" class="btn btn-danger">Excluir</button>
                </td>
            </tr>
        }      
        </tbody>  
    </table>

}

@code {
    private IList<Livro>? Objetos { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        Objetos = await api.GetAsync<Livro>("/livro"); 
    }

    private async Task Excluir(int id)
    {
        var httpClient = new HttpClient();
       
        using HttpResponseMessage response = await httpClient.DeleteAsync(
            $"http://localhost:5193/livro/{id}"
        );

        NavManager.NavigateTo("/listar", forceLoad: true);

        response.EnsureSuccessStatusCode();

    }
}




